<?php

namespace ProcessWire;

class CookieMonster extends WireData implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'CookieMonster', 
			'version' => 210,
			'summary' => 'Fulfills GDPR madness and renders a cookie banner above your siteâ€™s content.',
			'href' => 'https://github.com/johannesdachsel/cookiemonster',
			'singular' => true, 
			'autoload' => true, 
			'icon' => 'github-alt',
			'author' => 'Johannes Dachsel',
			'installs' => array('TextformatterCookieTable')
		);
	}
	




	/*
	* Module initialization
	* 	
	*/	
	public function init() {
		if (!$this->is_active) return;
		
		if(!isset($_COOKIE['cmnstr'])){
			$this->addHookAfter('Page::render', $this, 'addCookieBanner');	
		} else {
			$cookieValues = json_decode($_COOKIE['cmnstr']);
			if ($cookieValues->statistics && $this->ga_property_id) $this->addHookAfter('Page::render', $this, 'addTrackingCode');
		}
	}
		
	
	
	/*
	* addCookieBanner
	*
	* Adds cookie banner, scripts and styles 	
	*/
	public function addCookieBanner($event) {
		$page = $event->object; 
		if(in_array($page->template, ["admin","form-builder"])) return;
		
		if($this->wire('languages')) {
            $userLanguage = $this->wire('user')->language;
            $lang = $userLanguage->isDefault() ? '' : "__$userLanguage->id";
        } else {
            $lang = '';
        }
			
		$bodyText = $this->{"bodytext$lang"};
		
		if($this->autolink == 1 && $this->{"target_string$lang"} != '' && $this->target_page){
			$bodyText = str_replace($this->{"target_string$lang"}, '<a href="'.$this->wire('pages')->get($this->target_page)->url.'">'.$this->{"target_string$lang"}.'</a>', $bodyText);
		}
		
		$cookieBanner = '<div class="cmnstr">';
		$cookieBanner .= '<div class="cmnstr-inner">';
		$cookieBanner .= '<p class="cmnstr-title">'.$this->{"titletext$lang"}.'</p>';
		$cookieBanner .= '<div class="cmnstr-body">'.$bodyText.'</div>';
		$cookieBanner .= '
						<ul class="cmnstr-options">
							<li>
								<input type="checkbox" name="necessary" id="cmnstr_necessary" value="1" checked="checked" disabled>
								<label for="cmnstr_necessary">'.__("Notwendig").'</label>
							</li>';
		if ($this->{"cookies_statistics$lang"}) {
			$cookieBanner .= '<li>
								<input type="checkbox" name="statistics" id="cmnstr_statistics" value="1">
								<label for="cmnstr_statistics">'.__("Statistiken").'</label>
							</li>';
		}
		
		$cookieBanner .= '	<li><button class="cmnstr-button" type="button" onclick="setCookieMonster();">'.$this->{"buttontext_confirm$lang"}.'</button>';
		if ($this->{"cookies_statistics$lang"}) {
			$cookieBanner .= '<button class="cmnstr-button highlight" type="button" onclick="setCookieMonster(true);">'.$this->{"buttontext_accept$lang"}.'</button>';
		}
								
		$cookieBanner .= '</li></ul>';
		
		$necCount = count(explode("\n", $this->{"cookies_necessary$lang"}));
		
		$cookieBanner .= '<details class="cmnstr-details">
							<summary>Details</summary>
							<div class="cmnstr-tabs">	
								<ul class="cmnstr-tabs-nav">
									<li><a href="#cmnstr-details-necessary" class="is-active">'.__("Notwendig").' ('.$necCount.')</a></li>';
		if ($this->{"cookies_statistics$lang"}) {
			$statCount = count(explode("\n", $this->{"cookies_statistics$lang"}));
			$cookieBanner .= '<li><a href="#cmnstr-details-statistics">'.__("Statistiken").' ('.$statCount.')</a></li>';
		}
			
			$cookieBanner .= '</ul>
								<div class="cmnstr-tabs-container">
									<div id="cmnstr-details-necessary" class="is-active">
										<p>'.$this->{"introtext_necessary$lang"}.'</p>';
			$cookieBanner .= $this->renderCookieTable($this->{"cookies_necessary$lang"});			
			$cookieBanner .= '</div>';
									
			if ($this->{"cookies_statistics$lang"}) {
				$cookieBanner .= '<div id="cmnstr-details-statistics">
									<p>'.$this->{"introtext_statistics$lang"}.'</p>';
				$cookieBanner .= $this->renderCookieTable($this->{"cookies_statistics$lang"});						
				$cookieBanner .= '</div>';
			}
									
			$cookieBanner .= '</div>
							</div>
						</details>';
			
			if ($this->imprint_page) {
				$imprintPage = $this->pages->get($this->imprint_page);
				$cookieBanner .= '<a href="'.$imprintPage->url.'">'.$imprintPage->title.'</a>';
			}
						
		$cookieBanner .= '</div>';
		$cookieBanner .= '</div>';
		
		$output = $event->return;
		$folder = $this->wire('config')->urls->$this;
		
		// inject stylesheet
		if($this->use_stylesheet){
			$output = str_replace("</head>", "<link rel='stylesheet' type='text/css' href='{$folder}{$this}.css'></head>", $output);
		}
		
		// inject script file
		$output = str_replace("</head>", "<script src='{$folder}{$this}.js'></script></head>", $output);
		
		// inject polyfill for IE11 and below
		if (preg_match('~MSIE|Internet Explorer~i', $_SERVER['HTTP_USER_AGENT']) || (strpos($_SERVER['HTTP_USER_AGENT'], 'Trident/7.0; rv:11.0') !== false)) {
			$output = str_replace("</head>", "<script src='{$folder}details-polyfill.js'></script></head>", $output);
		}
		
		// append cookie banner
		$regex = '/(<body[^>]*>)/m';
		$replace = '$1'.$cookieBanner;
		$event->return = preg_replace($regex, $replace, $output);	
	}
	
	
	/*
	* addTrackingCode
	*
	* Appends Google Analytics Tracking Code to the <head>-element 	
	*/
	public function addTrackingCode($event) {
		$page = $event->object;
		
		if($page->template == 'admin') return;
		
		$event->return = str_replace("</head>", $this->renderGATracking($page)."</head>", $event->return);	
	}
	
	
	/*
	* renderCookieTable
	*
	* Helper function to render a table view for a given cookie config field
	*/
	public function renderCookieTable($cookiefield) {
		if (!$cookiefield || empty($cookiefield)) return;
		$rows = explode("\n", $cookiefield);
		$out = '<table class="cmnstr-table">
					<thead><tr>';
		$out .= '<th>'.__("Name").'</th>';
		$out .= '<th>'.__("Anbieter").'</th>';
		$out .= '<th>'.__("Zweck").'</th>';
		$out .= '<th>'.__("Ablauf").'</th>';
		$out .= '</tr></thead>
				<tbody>';
		
		foreach ($rows as $row) {
			$columns = explode("|", $row);
			
			$out .= '<tr>';
			foreach ($columns as $column) {
				$out .= '<td>'.$column.'</td>';
			}
			$out .= '</tr>';
		}
		$out .= '</tbody></table>';
		return $out;
	}
	
	
	/*
	* renderCookieTable
	*
	* Helper function to render Google Analytics Javascript snippet
	*/
	public function renderGATracking($page) {
		$out = "
			<script>
				var gaProperty = '{$this->ga_property_id}';
				var disableStr = 'ga-disable-' + gaProperty;
				
				if (document.cookie.indexOf(disableStr + '=true') > -1) {
					window[disableStr] = true;
				}
				
				function gaOptout() {
					document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
					window[disableStr] = true;
					alert('Die Erfassung von Daten durch Google Analytics wurde deaktiviert.');
				}
				
				(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
				(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
				m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
				})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
				
				ga('create', '{$this->ga_property_id}', 'auto');
				ga('require', 'displayfeatures');
				ga('set', 'anonymizeIp', true);
				ga('send', 'pageview');
			</script>
		";
		
		return $out;
	}
	
	
	/*
	* getModuleConfigInputfields
	*
	* Module Configuration Panel
	*/
	public static function getModuleConfigInputfields(array $data) {
        require_once(__DIR__ . '/CookieMonsterConfig.php');
        $c = new CookieMonsterConfig($data);
        return $c->getConfig();
	}
}
