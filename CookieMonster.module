<?php namespace ProcessWire;

class CookieMonster extends WireData implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'CookieMonster', 
			'version' => 100, 
			'summary' => 'Fulfills GDPR madness and renders a cookie banner above your site’s content.',
			'singular' => true, 
			'autoload' => true, 
			'icon' => 'github-alt',
			'author' => 'Johannes Dachsel' 
		);
	}
	
	protected static $defaults = array(
		'bodytext' => "Diese Website verwendet Cookies, um die Nutzerfreundlichkeit zu verbessern. Durch die weitere Nutzung der Website stimmen Sie dem zu. Weitere Informationen zu Cookies und deren Deaktivierung finden Sie unter Datenschutz. Diese Website verwendet das Tracking Tool Google Analytics, damit wir unsere Website bedarfsgerecht gestalten und fortlaufend optimieren können. Durch die weitere Nutzung der Website stimmen Sie dem zu. Weitere Informationen zu Tracking Tools und deren Deaktivierung finden Sie unter Datenschutz.",
		'buttontext' => "Akzeptieren",
		'custom_css' => ""
	);

	public function init() {
		$this->addHookAfter('Page::render', $this, 'addCookieBanner'); 
	}

	public function addCookieBanner($event) {
		$page = $event->object; 
		if($page->template == 'admin') return;
		
		if($this->wire('languages')) {
            $userLanguage = $this->wire('user')->language;
            $lang = $userLanguage->isDefault() ? '' : "__$userLanguage->id";
        } else {
            $lang = '';
        }
		
		if(isset($_COOKIE['cmnstr'])){
			return;
		} else {
			$cookieBanner = '<div class="cmnstr">';
			$cookieBanner .= '<div class="cmnstr-body">'.nl2br($this->{"bodytext$lang"}).'</div>';
			$cookieBanner .= '<button class="cmnstr-button" type="button" onclick="setCookieMonster();">'.$this->{"buttontext$lang"}.'</button>';
			$cookieBanner .= '</div>';
			$cookieBanner .= '<style>';
			$cookieBanner .= '.cmnstr{position:fixed; top:0; left:0; width: 100%; padding: 1em; background-color: rgba(0,0,0,.9); color: #FFF; display: flex; justify-content: space-between; align-items: center;}';
			$cookieBanner .= '.cmnstr-body{font-size: .875em; padding:0; margin:0 1.5em 0 0; flex: 0 1 auto;}';
			$cookieBanner .= '.cmnstr-body a{color: #FFF; text-decoration: none; border-bottom: 1px dotted #FFF;}';
			$cookieBanner .= '.cmnstr-body a:hover{border-bottom: 1px solid #FFF;}';
			$cookieBanner .= '.cmnstr-button{flex: 1 0 auto; max-width: 250px;}';
			$cookieBanner .= $this->custom_css;
			$cookieBanner .= '</style>';
			$cookieBanner .= '<script>';
			$cookieBanner .= 'function setCookieMonster(){';
			$cookieBanner .= 'document.cookie = "cmnstr=1; expires=Fri, 31 Dec 9999 23:59:59 GMT";';
			$cookieBanner .= 'var cmnstrBanner = document.querySelector(".cmnstr");';
			$cookieBanner .= 'cmnstrBanner.remove();';
			$cookieBanner .= '}';
			$cookieBanner .= '</script>';
			
			$event->return = str_replace("</body>", "{$cookieBanner}</body>", $event->return);	
		} 
	}
	
	public static function getModuleConfigInputfields(array $data) {
		$data = array_merge(self::$defaults, $data);
		
		$fields = new InputfieldWrapper();
		$modules = wire('modules');
		
		$field = $modules->get('InputfieldTextarea');
		$field->label = __('Banner-Text');
		$field->description = __('Der Text des Cookie-Banners');
		$field->notes = __('HTML ist erlaubt, Zeilenumbrüche werden automatisch in <br>-Elemente umgewandelt.');
		$field->attr('name', 'bodytext');
		$field->attr('value', $data['bodytext']);
		$field->columnWidth = '70';
		$field->useLanguages = true;
		$fields->append($field);
		
		$field = $modules->get('InputfieldText');
		$field->label = __('Button-Text');
		$field->description = __('Beschriftung des Buttons');
		$field->attr('name', 'buttontext');
		$field->attr('value', $data['buttontext']);
		$field->columnWidth = '30';
		$field->useLanguages = true;
		$fields->append($field);
		
		$field = $modules->get('InputfieldTextarea');
		$field->label = __('Eigenes CSS');
		$field->description = __('Platz für eigenes CSS');
		$field->notes = __('Die mitgelieferten Styles können hiermit überschrieben werden.');
		$field->attr('name', 'custom_css');
		$field->attr('value', $data['custom_css']);
		$field->columnWidth = '100';
		$fields->append($field);
		
		return $fields;
	}
}
